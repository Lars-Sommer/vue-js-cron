import{_ as e,o as t,c as a,e as d}from"./app.33501cc6.js";const n={},r=d(`<h1 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h1><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> core <span class="token keyword">from</span> <span class="token string">&#39;@vue-js-cron/core&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> util <span class="token punctuation">}</span> <span class="token operator">=</span> core
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><dl><dt><a href="#toText">toText(value)</a> \u21D2 <code>string</code></dt><dd><p>type definition</p></dd><dt><a href="#genItems">genItems(min, max, genText, genAltText)</a> \u21D2 <code>Array.&lt;{value:number, text:string, alt:string}&gt;</code></dt><dd><p>generate items for fields</p></dd><dt><a href="#pad">pad(n, width)</a> \u21D2 <code>string</code></dt><dd><p>pads numbers</p></dd><dt><a href="#isObject">isObject(value)</a> \u21D2 <code>Boolean</code></dt><dd><p>determines whether the passed value is an object</p></dd><dt><a href="#deepMerge">deepMerge(target, ...sources)</a> \u21D2 <code>object</code></dt><dd><p>copies (deep copy) all properties from each source to target</p></dd></dl><p><a name="toText"></a></p><h2 id="totext-value-\u21D2-string" tabindex="-1"><a class="header-anchor" href="#totext-value-\u21D2-string" aria-hidden="true">#</a> toText(value) \u21D2 <code>string</code></h2><p>type definition</p><p><strong>Kind</strong>: global function</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>number</code></td></tr></tbody></table><p><a name="genItems"></a></p><h2 id="genitems-min-max-gentext-genalttext-\u21D2-array-value-number-text-string-alt-string" tabindex="-1"><a class="header-anchor" href="#genitems-min-max-gentext-genalttext-\u21D2-array-value-number-text-string-alt-string" aria-hidden="true">#</a> genItems(min, max, genText, genAltText) \u21D2 <code>Array.&lt;{value:number, text:string, alt:string}&gt;</code></h2><p>generate items for fields</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>Array.&lt;{value:number, text:string, alt:string}&gt;</code> - array of items</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>min</td><td><code>number</code></td><td>first value</td></tr><tr><td>max</td><td><code>number</code></td><td>last value</td></tr><tr><td>genText</td><td><a href="#toText"><code>toText</code></a></td><td>returns a string representation of value</td></tr><tr><td>genAltText</td><td><a href="#toText"><code>toText</code></a></td><td>returns an alternative string representation of value</td></tr></tbody></table><p><a name="pad"></a></p><h2 id="pad-n-width-\u21D2-string" tabindex="-1"><a class="header-anchor" href="#pad-n-width-\u21D2-string" aria-hidden="true">#</a> pad(n, width) \u21D2 <code>string</code></h2><p>pads numbers</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>string</code> - the padded number</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>n</td><td><code>number</code></td><td>number to pad</td></tr><tr><td>width</td><td><code>number</code></td><td></td></tr></tbody></table><p><strong>Example</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//returns &quot;001&quot;</span>
util<span class="token punctuation">.</span><span class="token function">pad</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="isObject"></a></p><h2 id="isobject-value-\u21D2-boolean" tabindex="-1"><a class="header-anchor" href="#isobject-value-\u21D2-boolean" aria-hidden="true">#</a> isObject(value) \u21D2 <code>Boolean</code></h2><p>determines whether the passed value is an object</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>Boolean</code> - true if value is an object, otherwise false</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>value</td><td><code>any</code></td></tr></tbody></table><p><a name="deepMerge"></a></p><h2 id="deepmerge-target-sources-\u21D2-object" tabindex="-1"><a class="header-anchor" href="#deepmerge-target-sources-\u21D2-object" aria-hidden="true">#</a> deepMerge(target, ...sources) \u21D2 <code>object</code></h2><p>copies (deep copy) all properties from each source to target</p><p><strong>Kind</strong>: global function<br><strong>Returns</strong>: <code>object</code> - target</p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>target</td><td><code>object</code></td></tr><tr><td>...sources</td><td><code>object</code></td></tr></tbody></table>`,32),s=[r];function o(i,c){return t(),a("div",null,s)}var p=e(n,[["render",o],["__file","util.html.vue"]]);export{p as default};
